generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model cars {
  id           Int       @id @default(autoincrement())
  make         String?
  model        String?
  year         Int?
  color        String?
  body         String?
  transmission String?
  drivetype    String?
  fueltype     String?
  rentals      Rentals[]
}

model persons {
  id        Int       @id @default(autoincrement())
  firstname String?
  lastname  String?
  email     String?
  phone     String?
  address   String?
  city      String?
  rentals   Rentals[]
}

model Rentals {
  id        Int       @id @default(autoincrement())
  carid     Int?
  startdate DateTime? @db.Date
  enddate   DateTime? @db.Date
  value     Int?
  personid  Int?
  cars      cars?     @relation(fields: [carid], references: [id])
  persons   persons?  @relation(fields: [personid], references: [id])
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  score         Int       @default(0)

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
